React : 이전 JS Study에서 id와 class명으로 값을 찾아 DOM의 형태를 변경 했었습니다.ㄴ
원하는 이벤트가 발생 -> DOM의 특정 속성을 바꿔줌
문제점 : 인터렉션이 자주 발생하고, 이에 따라 동적으로 UI표현해야된다면
코드는 복잡해지고 유지보수가 어려워집니다.

 * DOM에 접근하는 코드들이 아주 복잡하게 길어지기 떄문에

이를 해결하기 위해 다양한 프레임워크가 만들어져 DOM의 업데이트를 간소화 해줬지만

React는 다른 발상으로 어떠한 상태가 바뀌었을 때 그상태에 따라 DOM의 셋팅을 
바꾸는것이 아닌 아예 다 날리고 처음부터 모든걸 새로 만들어서 보여주는겁니다.

-> DOM의 업데이트를 어떻게 해야할지 고민을 안해도 되기 때문에 개발이 쉬워진다.
하지만 모든걸 다 날리고 새로 만드는 동작들은 규모가 커질수록 속도가 매우 느릴겁니다.
React는 이러한 문제를 Virtual DOM이라는것을 사용해서 가능하게 했습니다.

Virtula DOM은 가상의 DOM입니다 실제로 보여지는 DOM이 아니라 
메모리에 가상으로 존재하기 떄문에 브라우저에서는 빠르게 동작합니다.
Reat의 상태가 업데이트가 되면 업데이트가 필요한 UI를 VIrtual DOM을
통해 메모리상에 렌더링 해두었다 Reat의 알고리즘에 따라 실제 브라우저에 보여줍니다.
실제 브라우저의 DOM과 그려야하는 DOM을 비교후 차이가 있는 곳을 감지하여
이를 패치해주는 방식입니다. 이를 통해 개발도 쉽고 빠른 성능을 갖는 웹페이지
개발이 가능하게 되었습니다.

-----------------------------------------------------------------------

작업 환경 준비

- Node.JS : Webpack과 Babel과 같은 도구들이 Node.js를 기반으로 만들어졌습니다.
- Yarn : npm의 개선된 버전으로 보시면됩니다.
-> npm은 Node.js를 설치하게 될 때 같이 딸려오는 패키지 도구입니다.
Yarn은 더 나은 속도, 더 나은 캐싱 시스템을 사용하기 위함입니다.
*npm : 프로젝트에 사용되는 라이브러리를 설치하고 해당 라이브러릴들의 버전 관리를 할 떄 사용

what is Webpack & Babel
-> React 프로젝트를 만들게 되면서 컴포넌트를 여러가지 파일로 분리해 저장 할 것이고
또 이 컴포넌트는 일반 자바스크립트가 아닌 JSX라는 문법으로 작성하게 됩니다. 여러가지 파일을 한개로 결합하기 위해
Webpack이라는 도구를 사용하고, JSX를 비롯한 새로운 자바스크립트 문법들을 사용하기 위해서 Babel이라는 도구를 사용합니다.


코드 에디터 : VSCode를 사용합니다.
Git bash : 윈도우 경우 설치하여 명령어를 입력하고 맥은 기본 터미널을 사용합니다.

https://react.vlpt.us/basic/02-prepare.html